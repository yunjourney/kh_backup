package 평가1_서술형;
// [문1] 변수명 짓기 : 대소문자, 특수문자(_, $), 숫자(맨 앞x), 예약어x, 이름 사이에 공백x, 길이제한없음
// 복합명사 사용 시 첫번째 단어는 소문자로, 다음 단어부터는 대문자로 (camel 표기법 : 관례일 뿐 문법x, 대문자시작이면 클래스라고 생각)
// 사용 목적에 맞게끔 이름을 지어야 함
// [문2] 변수 선언 시 사용되는 자료형 별 메모리 할당 크기 확인
// boolean 1Byte, char 2Byte, byte 1Byte, short 2Byte, int 4Byte, long 8Byte
// float 4Byte, double 8Byte
// String은 참조형이므로 크기를 알 수가 없다.
// [문3] 변수란??? 하나의 값을 저장하기 위한 공간
// [문4] 기본 자료형 변수와 참조 자료형 변수의 차이점
// [문5] 상수란??? 값을 한번만 저장하고 난 후 더이상 변경 불가한 변수 (Read only 상태가 됨)
// [문6] 문자열을 담는 변수를 만들고 문자열 대입하기 (String str = "Java";)
// [문7] 자동 형 변환(묵시적 형 변환) : 데이터 타입이 다른 경우 컴파일러가 유리한 방향으로 변환 해줌. (즉, 작은 것과 큰 것이 있을 때 큰 쪽으로 맞춤)
// [문8] 강제 형 변환(명시적 형 변환) : 값의 범위가 큰 것에서 작은 것으로 변경 할 때.. (개발자가 의도를 갖고 변경하는 것)
// [문9] 단항 연산자 종류 : !(현재값 부정), ++(변수값 1 증가), --(변수값 1 감소), +34,-34(양수 음수 표현), ~(비트연산자:부호를 반전시킴)
// [문10] 다항 연산자 종류 : 산술 연산자(+, -, *, /, %), 비교 연산자(>, <, >=, <=, !=, ==),
// 논리 연산자(&&, ||), 비트 연산자(&(둘다 1이면 1), |(둘 중 하나만 1이면 1), ^(XOR 값이 다르면 1))
// [문11] 산술연산자에서 각 연산자의 의미 (+더한 값을 반환, -뺀 값을 반환, *곱한 값을 반환, /나눈 값을 반환, %나눈 나머지값을 반환)
// [문12] 단항 연산자 중 ++, -- : 증감 연산자(변수의 값을 1 증감)
// [문13] 논리 연산자 설명 : &&(둘 다 참이어야 참), ||(둘 중 하나만 참이면 참)
// [문14] 전위 연산자 : 값을 먼저 증가하고 대입이 이루어짐, 후위 연산자 : 대입을 먼저하고 증가가 이루어짐
// [문15] 관계 연산자 확인 문제
// [문16] 연산 결과가 논리 값(true/false)이 나오는 연산자를 4가지 쓰시오. (논리/비교연산자 전부 : >, <, !=, ==, &&, ||, >=, <=)
// [문17] 연산자 우선 순위 기술 [산술연산자, 삼항연산자, 논리연산자, 최우선연산자(괄호), 대입연산자]
//        : 최우선연산자 -> 산술연산자 -> 논리연산자 -> 삼항연산자 -> 대입연산자
// [문18] 삼항 연산자 설명 : 조건식에서 참과 거짓만 있는 경우 삼항연산자로 표현 가능
//     답 => (조건식) ? 참인 경우 수행 : 거짓인 경우 수행;
// [문19] 조건문의 종류를 쓰시오. (if, switch)
// [문20] 반복문의 종류를 쓰시오. (for, while)
// [문21] if(조건식) 조건식에 들어가는 것 : 논리, 값 (실제 사용되는 형태 : 값, 비교연산자, 논리연산자, 비교연산자를 통한 값의 범위)
// [문22] switch(값)에 들어가는 값 : 정수, 문자, 문자열
// [문23] 코딩 결과 확인 문제 : 1 ~ 5 까지 수행하는 반복문
// [문24] 코딩 결과 확인 문제(for) : 구구단 출력 문제 (2단만 출력), for문의 반복 수행 범위 확인

public class TestEx4Main {
    public static void main(String[] args) {
        // [문1] 변수명 짓기
        double taxRate = 0.10;
        int _____DDDDD;
        int ___$$$1234;
        //int switch; // 예약어이므로 불가능

        // [문2] 자료형 별 메모리 할당 크기
        boolean isTrue = true; // boolean 타입 : 참과 거짓 판별용, 1Byte, 기본값(아무것도 안넣었을때)은 false
        char ch = '여'; // char 타입 : 1개의 문자를 저장하기 위한 공간, 2Byte (양수만), 내부로는 양수의 정수값으로 저장됨
        // 정수 타입
        byte bt = 127; // byte 타입 : 1Byte 정수 타입의 자료형 (-128 ~ 127)
        short st = 32000; // short 타입 : 2Byte 정수 타입의 자료형 (-32xxx ~ 32xxx)
        int it = 2100000000; // int 타입 : 4Byte 정수 타입의 자료형 (-21억 ~ 21억)
        long lt = 4500000000000000000L; // long 타입 : 8Byte 정수 타입 (대략 -450경 ~ 450경)
        // 실수 타입
        float tf = 3.14f; // float 타입 : 4Byte 실수형(소수점 이하가 있음)
        double dt = 3.14; // double 타입 : 8Byte 실수형

        // [문3] 변수란?
        int xx = 100; // 100이라는 값을 저장하기 위해 4Byte 정수 타입의 공간을 할당하고 값을 대입

        // [문4]
        // 기본 자료형 : 실제 자료형에 '값'을 저장하는 것 (boolean, byte, char, int...)
        // 참조 자료형 : 실제 값을 저장하지 않고 '값이 있는 주소'를 저장함 (String, 배열, 객체)

        // [문5]
        final double PI = 3.14; // final 키워드 사용으로 상수로 만듦. static 붙이려면 메인 밖에서.
        double PI_1 = PI; // 이건 값을 읽어서 대입하는 것이기 때문에 가능하다.

        // [문6]
        String str = "Java"; // 문자열을 저장하는 데이터 타입은 String

        // [문7]
        double avr1 = (98 + 56 + 78)/3.00;
        System.out.println(avr1); // 77.333333333333

        // [문8] 강제 형 변환
        double avr2 = (double)(100+34+78)/3;
        int avr3 = (int)3000000000L; // 범위가 큰 쪽에서 작은 쪽으로 바꾼 것. long을 int로 바꾸겠다.

        // [문9] 단항 연산자
        boolean isTruee = false;
        if(!isTruee); // true
        for(int i = 0; i < 10; i++);
        int num = 10;
        System.out.println(~num); // -11

        // [문10] 다항 연산자
        int num1 = 10, num2 = 20;
        int sum = num1++ + num2++ + -num2;

        // [문12][문14]
        int num3 = 10;
        System.out.println(++num3); // 11, 전위 증가 연산자
        System.out.println(num3++); // 10, 후위 증가 연산자 (위에 꺼 없을 때)

        // [문15] 관계 연산자 확인 문제
        boolean a = true;
        boolean b = false;
        System.out.println(a || b); // true 둘 중 하나만 참이어도 참
        System.out.println(a && b); // false 둘 다 참이어야 참
        System.out.println(!(a && b)); // true 괄호 내부 조건을 먼저 수행한 결과가 거짓이었고 !연산자로 결과가 참으로 바뀜

        // [문16]
        int x = 10;
        int y = 20;
        System.out.println(x < y); // true (java는 true. 다른언어는 1로 뜰 수도)
        System.out.println(x != y); // true
        System.out.println(x == y); // false
        System.out.println(x > 0 && x < y); // true

        // [문23] 수행결과
        for(int i = 1; i <= 5; i++) { // 1 ~ 5까지 수행
            System.out.println(i + "*" + i + "=" + (i*i)); // i * i = (i*i)
            // 1*1=1 \n 2*2=4 \n 3*3=9 \n 4*4=16 \n 5*5=25
        }

        // [문24] 반복문의 범위를 확인하는 문제
        for(int i = 1; i < 10; i++) { // i <= 9 가능
            System.out.println(2 + "*" + i + "=" + (2*i));
        }
    }
}
